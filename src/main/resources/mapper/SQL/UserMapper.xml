<?xml version ="1.0" encoding ="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- Mapperとxml の マッピング -->
<mapper namespace ="com.example.demo.repository.UserMapper">

	<!-- マッピング 定義( ユーザー) -->
	<resultMap type="com.example.demo.domain.user.model.MUser"
		id="user">
		<id column="id" property="id" />
		<result column="user_mail" property="userMail" />
		<result column="password" property="password" />
		<result column="user_name" property="userName" />
		<result column="birthday" property="birthday" />
		<result column="age" property="age" />
		<result column="gender" property="gender" />
		<result column="department_id" property="departmentId" />
		<result column="role" property="role" />
		<association property="department" resultMap="department" />
		<collection property="salaryList" resultMap="salary"
			columnPrefix="salary_" />
	</resultMap>

	<!-- マッピング 定義( 部署) -->
	<resultMap
		type="com.example.demo.domain.user.model.Department" id="department">
		<id column="department_id" property="departmentId" />
		<result column="department_name" property="departmentName" />
	</resultMap>

	<!-- マッピング 定義( 給料) -->
	<resultMap type="com.example.demo.domain.user.model.Salary"
		id="salary">
		<id column="user_id" property="userId" />
		<id column="y_month" property="yearMonth" />
		<result column="salary" property="salary" />
	</resultMap>

	<!-- マッピング 定義(時間) -->
	<resultMap type="com.example.demo.domain.user.model.WorkUser"
		id="WorkUser">
		<id column="id" property="id"/>
		<result column="user_name" property="userName"/>
		<result column="start_time" property="startTime"/>
		<result column="start_time" property="finishTime"/>
		<result column="work_flag" property="workFlag"/>
		<result column="message" property="message"/>
	</resultMap>


	<!-- ユーザー 1 件 登録 -->
	<insert id="insertOne">
		insert into m_user(
		user_mail
		,password
		,user_name
		,birthday
		,age
		,gender
		,department_id
		,role
		)
		values (
		#{userMail}
		,#{password}
		,#{userName}
		,#{birthday}
		,#{age}
		,#{gender}
		,#{departmentId}
		,#{role}
		)
	</insert>

	<!-- ユーザー 複数 件 取得 -->
	<select id="findMany" resultType="MUser">
		select
		*
		from
		m_user
		<where>
			<if test="userMail !=null">
				user_mail LIKE CONCAT('%',#{userMail},'%')
			</if>
			<if test="userName !=null">
				and user_name LIKE CONCAT('%',#{userName},'%')
			</if>
		</where>
	</select>


	<!-- ユーザー 1 件 検索 -->
	<select id="findOne" resultMap="user">
		select
		id
		,m_user.user_mail
		,m_user.password
		,m_user.user_name
		,m_user.birthday
		,m_user.age
		,m_user.gender
		,m_department.department_id
		,m_department.department_name
		,t_salary.user_id as salary_user_id
		,t_salary.y_month as salary_y_month
		,t_salary.salary as salary_salary
		from
		m_user
		left join m_department
		on m_user.department_id =
		m_department.department_id
		left join t_salary
		on m_user.id =
		t_salary.user_id
		where
		m_user.user_mail = #{userMail}
	</select>

	<!-- ユーザー 1 件 更新 -->
	<update id="updateOne">
		update
		m_user
		set
		password = #{password}
		,user_name =#{userName}
		where
		user_mail = #{userMail}
	</update>

	<!-- ユーザー 1 件 削除 -->
	<delete id="deleteOne">
		delete from
		m_user
		where
		user_id = #{userId}
	</delete>

	<!-- ログイン ユーザー 情報 取得 -->
	<select id="findLoginUser" resultType="MUser">
		select
		*
		from
		m_user
		where
		user_id =#{userId}
	</select>
	
	<!-- 出勤判定 -->
	<select id="checkRecord" resultType="int">
	SELECT EXISTS(SELECT * FROM user_time WHERE user_id = #{userId} AND work_flag = 1 );
	</select>
	
	<!-- 出勤時間記録 -->
	<select id="startRecord">
		insert into user_time(
		user_id
		,start_time
		,finish_time
		,work_flag
		)	
		values (
		#{uId}
		,#{nowDateTime}
		,NULL
		,1
		)
	</select>
	
	<!-- 退勤時間記録 -->
	<update id="finishRecord">
		update
		user_time
		set
		 finish_time = #{nowDateTime}
		,work_flag = 0
		where
		user_id = #{uId}
		and
		work_flag = 1
	</update>

	<!-- 出勤者を取得 -->
	<select id="getworkers" resultType="WorkUser">
		select
		m_user.user_name
		,start_time
		from
		user_time
		left join m_user
		on
		user_time.user_id = m_user.id
		where
		work_flag =1
	</select>
	
	<!-- 個人の勤怠情報の取得 -->
	<select id="getRecord" resultType="WorkUser">
		select
		 user_time.id
		,user_name
		,start_time
		,finish_time
		,work_flag
		,message
		from
		user_time
		left join m_user
		on
		user_time.user_id = m_user.id
		where
		m_user.id = #{id}
	</select>
	
	<!-- すべての勤退記録を取得 -->
	<select id="allRecord" resultType="WorkUser">
		select
		 *
		from
		user_time
		left join m_user
		on
		user_time.user_id = m_user.id
	</select>
	
	<!-- 勤退記録を更新 -->
	<select id="UpdateRecord">
		update
		 user_time
		set
		start_time = #{startTime}
		,finish_time =#{finishTime}
		,message=#{message}
		where
		user_time.id = #{id}
	</select>
</mapper>